"""
1. 다트 게임은 총 3번의 기회로 구성된다.
2. 각 기회마다 얻을 수 있는 점수는 0점에서 10점까지이다.
3. 점수와 함께 Single(S), Double(D), Triple(T) 영역이 존재하고 각 영역 당첨 시 점수에서 1제곱, 2제곱, 3제곱 (점수1 , 점수2 , 점수3 )으로 계산된다.
4. 옵션으로 스타상(*) , 아차상(#)이 존재하며 스타상(*) 당첨 시 해당 점수와 바로 전에 얻은 점수를 각 2배로 만든다. 아차상(#) 당첨 시 해당 점수는 마이너스된다.
5.스타상(*)은 첫 번째 기회에서도 나올 수 있다. 이 경우 첫 번째 스타상(*)의 점수만 2배가 된다. (예제 4번 참고)
6. 스타상(*)의 효과는 다른 스타상(*)의 효과와 중첩될 수 있다. 이 경우 중첩된 스타상(*) 점수는 4배가 된다. (예제 4번 참고)
7. 스타상(*)의 효과는 아차상(#)의 효과와 중첩될 수 있다. 이 경우 중첩된 아차상(#)의 점수는 -2배가 된다. (예제 5번 참고)
8. Single(S), Double(D), Triple(T)은 점수마다 하나씩 존재한다.
9. 스타상(*), 아차상(#)은 점수마다 둘 중 하나만 존재할 수 있으며, 존재하지 않을 수도 있다.

0~10의 정수와 문자 S, D, T, *, #로 구성된 문자열이 입력될 시 총점수를 반환하는 함수를 작성하라.

"""

def solution(dartResult):
    answer = 0
    x,y = [], []
    
    point, signs = '', '' # 점수, 보너스[옵션]
    for i in dartResult:
        if i.isdigit(): # 점수
            point += i  # point에 점수를 더함(문자열 그대로, ex 10 같은 점수를 위해)
            if signs != "": # point에 점수를 더할 때, 보너스[옵션]이 있다면 y 배열에 추가
                y.append(signs)
                signs = ""  # y 배열에 보너스[옵션]을 더하고 초기화
        else:           # 보너스[옵션]
            signs += i  # sings에 보너스[옵션]을 더함
            if point != "": # sings에 보너스[옵션]을 더할 때, 점수가 있다면 x 배열에 추가
                x.append(int(point))    # point는 문자열이라서 int로 형변환
                point = ""              # point 초기화
    y.append(signs) # 반복문이 끝나고 마지막 보너스[옵션]을 y 배열에 추가
    
    for i in range(0,3): # 다트는 3번 던지기에 3번 반복
        tmp = y[i]       # sings를 하나씩 가져온다
        
        if tmp.startswith("D"): # 기호가 D -> 2제곱
            x[i] *= x[i]
        elif tmp.startswith("T"): # 기호가 T -> 3제곱
            x[i] *= x[i] * x[i]
        
        if tmp.endswith("#"):   # 기호가 #(아차상) 으로 끝나면 * -1
            x[i] *= -1
        elif tmp.endswith("*"): # 기호가 *(스타상) 으로 끝나면 직전 점수까지 * 2
            if i == 0:          # 첫번째 시도라면 첫번째 점수만 * 2
                x[i] *= 2
            else:
                x[i] *= 2
                x[i-1] *= 2
    
    answer = sum(x)
    
    return answer

# 예제	    dartResult	answer	설명
# 1	        1S2D*3T	    37	    11 * 2 + 22 * 2 + 33
# 2	        1D2S#10S	9	    12 + 21 * (-1) + 101
# 3	        1D2S0T	    3	    12 + 21 + 03
# 4	        1S*2T*3S	23	    11 * 2 * 2 + 23 * 2 + 31
# 5	        1D#2S*3S	5	    12 * (-1) * 2 + 21 * 2 + 31
# 6	        1T2D3D#	    -4	    13 + 22 + 32 * (-1)
# 7	        1D2S3T*	    59	    12 + 21 * 2 + 33 * 2